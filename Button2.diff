diff --git a/Button2.qml b/cButton2.qml
index 5a16a5c..1865d46 100644
--- a/Button2.qml
+++ b/cButton2.qml
@@ -22,64 +22,77 @@
 import QtQuick 1.1 as QML
 
 QML.Rectangle {
-  id: root
-  property alias icon: iconImage.source
-  property alias buttonText: buttonLabel.text
-  property alias font: buttonLabel.font
-  property bool enabled: true
-  signal clicked
-
-  property string _state
-  height: 52
-  color: "#00000000" // Set a transparent color.
-
-  QML.BorderImage {
-    id: borderImage
-    anchors.fill: parent
-    source: "images/button-border" + root._state + ".png"
-    border { left: 14; right: 14; top: 14; bottom: 14 }
-    horizontalTileMode: QML.BorderImage.Repeat
-    verticalTileMode: QML.BorderImage.Stretch
-  }
-
-  QML.Image {
-    id : iconImage
-    anchors {
-      verticalCenter : parent.verticalCenter;
-      margins: (source == "" ? 0 : 5);
-      left: (buttonText == "" ? undefined : parent.left);
-      horizontalCenter: (buttonText == "" ? parent.horizontalCenter : undefined)
+    id: root
+
+    property string _state
+    property alias icon: iconImage.source
+    property alias buttonText: buttonLabel.text
+    property alias font: buttonLabel.font
+    property bool enabled: true
+
+    signal clicked
+
+
+    height: 52
+    color: "#00000000" // Set a transparent color.
+
+    QML.BorderImage {
+        id: borderImage
+        anchors.fill: parent
+        source: "images/button-border" + root._state + ".png"
+        border { left: 14; right: 14; top: 14; bottom: 14 }
+        horizontalTileMode: QML.BorderImage.Repeat
+        verticalTileMode: QML.BorderImage.Stretch
+    }
+
+    QML.Image {
+        id: iconImage
+
+        anchors {
+            verticalCenter: parent.verticalCenter
+            margins: (source == "" ? 0 : 5);
+            left: (buttonText == "" ? undefined : parent.left);
+            horizontalCenter: (buttonText == "" ? parent.horizontalCenter : undefined)
+        }
+
+        fillMode: QML.Image.PreserveAspectFit
+        height: (root.height > sourceSize.height) ? sourceSize.height : (root.height - anchors.margins)
+        smooth: true
     }
-    fillMode: QML.Image.PreserveAspectFit
-    height: (root.height > sourceSize.height) ? sourceSize.height : (root.height - anchors.margins)
-    smooth: true
-  }
-
-  QML.Text {
-    id: buttonLabel
-    anchors { centerIn : parent; left: iconImage.right; right: parent.right }
-    color: root.enabled ? "black" : "gray"
-  }
-
-  states: [
-    QML.State {
-      name: "pressed"
-      when : _mouseArea.pressed
-      QML.PropertyChanges {
-        target: root
-        _state : "-active"
-      }
-      QML.PropertyChanges {
-        target: buttonLabel
-        color: "white"
-      }
+
+    QML.Text {
+        id: buttonLabel
+
+        anchors {
+            centerIn: parent
+            left: iconImage.right
+            right: parent.right
+        }
+
+        color: root.enabled ? "black" : "gray"
+    }
+
+    states: [
+        QML.State {
+            name: "pressed"
+            when: _mouseArea.pressed
+
+            QML.PropertyChanges {
+                target: root
+                _state: "-active"
+            }
+
+            QML.PropertyChanges {
+                target: buttonLabel
+                color: "white"
+            }
+        }
+    ]
+
+    QML.MouseArea {
+        id: _mouseArea
+        anchors.fill: parent
+        enabled: parent.enabled
+        onClicked: parent.clicked()
     }
-  ]
-
-  QML.MouseArea {
-    id : _mouseArea
-    anchors.fill: parent
-    enabled: parent.enabled
-    onClicked: parent.clicked()
-  }
 }
